{"version":3,"file":"static/js/901.61dd0fdf.chunk.js","mappings":"6NAEaA,EAA4B,SAACC,GACxC,OAAOA,EAAMC,YAAYC,WAC3B,EACaC,EAA0B,SAACH,GACtC,OAAOA,EAAMC,YAAYG,UAC3B,E,UCNA,EAA+B,+BAA/B,EAAqE,uBAArE,EAAuG,2BAAvG,EAA4I,0BAA5I,EAAiL,2BAAjL,EAAqN,yBAArN,EAA2P,6BAA3P,EAAyS,iC,0DC6CnSC,EAAW,WACf,IAAMC,GAAWC,EAAAA,EAAAA,IAAYR,GACvBS,GAAaC,EAAAA,EAAAA,QAAuB,MAC1C,GAAgCC,EAAAA,EAAAA,WAAS,GAAK,eAAvCC,EAAQ,KAAEC,EAAW,MAE5BC,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACVF,IAA4B,QAAlB,EAAAH,EAAWM,eAAO,OAAlB,EAAoBC,iBACpC,GAAG,CAACT,IAcJ,OACE,iBAAKU,UAAWC,EAAqBC,SAbjB,SAACC,GACrB,IAAMC,EAASD,EAAME,cAEnBC,KAAKC,IAAIH,EAAOI,aAAeJ,EAAOK,WAAaL,EAAOM,aAC1D,KAECf,GAAYC,GAAY,GAEzBD,GAAYC,GAAY,EAE5B,EAG+D,UAC1DN,EAASqB,KAAI,SAACC,GACb,OACE,SAACC,EAAO,CACNC,OAAQF,EAAQG,MAChBH,QAASA,EAAQA,QACjBI,SAAUJ,EAAQI,SAClBC,OAAQL,EAAQK,QACXL,EAAQM,GAGnB,KACA,gBAAKC,IAAK3B,MAGhB,EACM4B,EAAwB,WAC5B,IAAMC,GAAc9B,EAAAA,EAAAA,IAAYJ,GAC1BmC,GAA0DC,EAAAA,EAAAA,MAgBhE,OACE,SAAC,KAAM,CAACC,cAfY,CACpBZ,QAAS,IAc6Ba,gBAAc,EAACC,SAXtC,SACfC,EAAmB,GAEf,IADHC,EAAa,EAAbA,cAEGD,EAAOf,UACTU,GAASO,EAAAA,EAAAA,IAAmBF,EAAOf,UACnCe,EAAOf,QAAU,IAEnBgB,GAAc,EAChB,EAE0E,SACrE,gBAAED,EAAM,EAANA,OAAM,OACP,SAAC,KAAI,WACH,iBAAK3B,UAAWC,EAAsB,WACpC,iBAAKD,UAAWC,EAAkB,WAChC,SAAC,KAAK,CACJ6B,KAAK,OACLC,KAAK,UACLC,MAAOL,EAAOf,QACdqB,YAAY,wBAEd,sBAEF,0BACE,mBACEC,SAA0B,YAAhBb,EACVrB,UAAU,eACV8B,KAAK,SAAQ,wBAKd,GAIf,EACMjB,EAAyBsB,EAAAA,MAC7B,YAA0C,IAAxCrB,EAAM,EAANA,OAAQF,EAAO,EAAPA,QAASI,EAAQ,EAARA,SAAUC,EAAM,EAANA,OACrBmB,GAAiB7C,EAAAA,EAAAA,IAAY8C,EAAAA,IACnC,OACE,iBAAKrC,UAAWC,EAAe,WAC7B,SAAC,KAAO,CACNqC,GAAI,8BAAgCrB,EACpCjB,UAAWC,EAAc,UACzB,SAACsC,EAAA,EAAM,CAACzB,OAAQA,OAElB,iBACEd,UAAWwC,IAAWvC,GAAY,UAC/BA,EAAkBmC,EAAelB,KAAOD,IACxC,WACH,gBAAKjB,UAAWC,EAAgB,SAAEe,KAClC,yBAAMJ,SAId,IAEF,EA9HiB,WACf,IAAM6B,GAASlD,EAAAA,EAAAA,IAAYmD,EAAAA,IACrBpB,GAA0DC,EAAAA,EAAAA,MAUhE,OARA1B,EAAAA,EAAAA,YAAU,WAER,OADAyB,GAASqB,EAAAA,EAAAA,OACF,WACLrB,GAASsB,EAAAA,EAAAA,OACTtB,EAASuB,EAAAA,GAAAA,kBAAgC,IAAI,GAC/C,CACF,GAAG,IAEEJ,GAEH,4BACE,SAACpD,EAAI,KACL,SAAC+B,EAAiB,QAJF,SAAC,KAAQ,CAACkB,GAAI,4BAOpC,C","sources":["redux/reduxSelectors/dialogsSelector.ts","webpack://me-app-react/./src/components/Main/Chat/ChatPage.module.css?0ddf","components/Main/Chat/ChatPage.tsx"],"sourcesContent":["import {AppStateType} from '../reduxStore'\n\nexport const getMessagesForChatDialogs = (state: AppStateType) => {\n  return state.messagePage.chatMessage\n}\nexport const getStatusForChatDialogs = (state: AppStateType) => {\n  return state.messagePage.chatStatus\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"MessagesList\":\"ChatPage_MessagesList__13Qkv\",\"text\":\"ChatPage_text__gPtM1\",\"textHost\":\"ChatPage_textHost__6BwfX\",\"message\":\"ChatPage_message__UJ7GK\",\"userName\":\"ChatPage_userName__5iPBE\",\"avatar\":\"ChatPage_avatar__wQs5c\",\"newMessage\":\"ChatPage_newMessage__rI+26\",\"newMessageForm\":\"ChatPage_newMessageForm__5SfXR\"};","import React, {FC, useEffect, useRef, useState} from 'react'\nimport {Avatar} from '../../../common/Avatar'\nimport {Field, Form, Formik, FormikHelpers} from 'formik'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {\n  getMessagesForChatDialogs,\n  getStatusForChatDialogs,\n} from '../../../redux/reduxSelectors/dialogsSelector'\nimport {\n  actionsDialog,\n  closeMessagesListening,\n  sendMessageForChat,\n  startMessagesListening,\n  ActionTypes,\n} from '../../../redux/dialogsReducer'\nimport styles from './ChatPage.module.css'\nimport {ThunkDispatch} from 'redux-thunk'\nimport {AppStateType} from '../../../redux/reduxStore'\nimport {Navigate, NavLink} from 'react-router-dom'\nimport {\n  getDataUserAuth,\n  getIsAuth,\n} from '../../../redux/reduxSelectors/authSelector'\nimport classnames from 'classnames'\n\nconst ChatPage = () => {\n  const isAuth = useSelector(getIsAuth)\n  const dispatch: ThunkDispatch<AppStateType, any, ActionTypes> = useDispatch()\n\n  useEffect(() => {\n    dispatch(startMessagesListening())\n    return () => {\n      dispatch(closeMessagesListening())\n      dispatch(actionsDialog.SetMessageForChat([], true))\n    }\n  }, [])\n\n  if (!isAuth) return <Navigate to={'/SocialNetwork_2.0/login'} />\n  return (\n    <div>\n      <Chat />\n      <NewMessageForChat />\n    </div>\n  )\n}\n\nconst Chat: FC = () => {\n  const messages = useSelector(getMessagesForChatDialogs)\n  const scrollDown = useRef<HTMLDivElement>(null)\n  const [isScroll, setIsScroll] = useState(true)\n\n  useEffect(() => {\n    if (isScroll) scrollDown.current?.scrollIntoView()\n  }, [messages])\n\n  const scrollHandler = (event: React.UIEvent<HTMLDivElement, UIEvent>) => {\n    const scroll = event.currentTarget\n    if (\n      Math.abs(scroll.scrollHeight - scroll.scrollTop) - scroll.clientHeight <\n      300\n    ) {\n      !isScroll && setIsScroll(true)\n    } else {\n      isScroll && setIsScroll(false)\n    }\n  }\n\n  return (\n    <div className={styles.MessagesList} onScroll={scrollHandler}>\n      {messages.map((message) => {\n        return (\n          <Message\n            avatar={message.photo}\n            message={message.message}\n            userName={message.userName}\n            userId={message.userId}\n            key={message.id}\n          />\n        )\n      })}\n      <div ref={scrollDown}></div>\n    </div>\n  )\n}\nconst NewMessageForChat: FC = () => {\n  const readyStatus = useSelector(getStatusForChatDialogs)\n  const dispatch: ThunkDispatch<AppStateType, any, ActionTypes> = useDispatch()\n\n  const initialValues = {\n    message: '',\n  }\n  type newMessage = {message: string}\n  const onSubmit = (\n    values: newMessage,\n    {setSubmitting}: FormikHelpers<newMessage>,\n  ) => {\n    if (values.message) {\n      dispatch(sendMessageForChat(values.message))\n      values.message = ''\n    }\n    setSubmitting(false)\n  }\n  return (\n    <Formik initialValues={initialValues} validateOnBlur onSubmit={onSubmit}>\n      {({values}) => (\n        <Form>\n          <div className={styles.newMessageForm}>\n            <div className={styles.newMessage}>\n              <Field\n                type=\"text\"\n                name=\"message\"\n                value={values.message}\n                placeholder=\"Enter your message\"\n              />\n              <hr />\n            </div>\n            <div>\n              <button\n                disabled={readyStatus === 'pending'}\n                className=\"btn btn-dark\"\n                type=\"submit\">\n                Send\n              </button>\n            </div>\n          </div>\n        </Form>\n      )}\n    </Formik>\n  )\n}\nconst Message: FC<PropsType> = React.memo(\n  ({avatar, message, userName, userId}) => {\n    const authorizedUser = useSelector(getDataUserAuth)\n    return (\n      <div className={styles.message}>\n        <NavLink\n          to={'/SocialNetwork_2.0/profile/' + userId}\n          className={styles.avatar}>\n          <Avatar avatar={avatar} />\n        </NavLink>\n        <div\n          className={classnames(styles.text, {\n            [styles.textHost]: authorizedUser.id === userId,\n          })}>\n          <div className={styles.userName}>{userName}</div>\n          <div>{message}</div>\n        </div>\n      </div>\n    )\n  },\n)\nexport default ChatPage\ntype PropsType = {\n  avatar: string\n  message: string\n  userName: string\n  userId: number\n}\n"],"names":["getMessagesForChatDialogs","state","messagePage","chatMessage","getStatusForChatDialogs","chatStatus","Chat","messages","useSelector","scrollDown","useRef","useState","isScroll","setIsScroll","useEffect","current","scrollIntoView","className","styles","onScroll","event","scroll","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","message","Message","avatar","photo","userName","userId","id","ref","NewMessageForChat","readyStatus","dispatch","useDispatch","initialValues","validateOnBlur","onSubmit","values","setSubmitting","sendMessageForChat","type","name","value","placeholder","disabled","React","authorizedUser","getDataUserAuth","to","Avatar","classnames","isAuth","getIsAuth","startMessagesListening","closeMessagesListening","actionsDialog"],"sourceRoot":""}